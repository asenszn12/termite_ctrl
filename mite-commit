#!/usr/bin/env python3

import sys
import re 
import os 
import shutil
import filecmp

# check if new commit is same as last commit or not
def same_as_last_commit(commit_index, commit_path, index_path):
    # commit 0 has nothing to compare with 
    if commit_index == 0:
        return False
    # if comit index > 0, then check commit files with inewly added index files
    # get previous commit path, get prev files and index files
    prev_commit = os.path.join(commit_path, str(commit_index - 1))
    # get all files from prev commit folder and sort but skip the commit.msg one 
    prev_files = sorted(f for f in os.listdir(prev_commit) if f != "commit_message.txt")
    index_files = sorted(os.listdir(index_path))

    if prev_files != index_files:
        return False

    for filename in index_files:
        index_file = os.path.join(index_path, filename)
        prev_file = os.path.join(prev_commit, filename)
        # make sure the files are properly compared to see if there are any changes
        if not filecmp.cmp(prev_file, index_file, shallow=False):
            return False
    return True

#===============================Functions=======================================

index_path = '.mygit/index'    

if not os.path.isdir(index_path):
    sys.exit(1)

args = sys.argv[1:]

# if -m is not in the argument
if '-m' not in args:
    print("usage: ./mygit-commit [-a] -m 'your-message'")
    sys.exit(1) 

m_index = args.index('-m')

# if argument is less than the m_index + commit msg 
if len(args) <= m_index + 1 :
    print("usage: ./mygit-commit [-a] -m 'your-message'")
    sys.exit(1)

commit_path = '.mygit/commits'
# Save commit_message and check if -a command was passed
commit_message = args[m_index + 1]
a_option = '-a' in args
 
# if index path is not found. then it must be an mygive-add error  
if not os.path.isdir(index_path):
    print("mygit-commit: error: index directory not found, did you run mygit-add?")
    sys.exit(1)

os.makedirs(commit_path, exist_ok=True)

# check if a dir exists with the commit index inside commit_path
commit_index = 0
while os.path.exists(os.path.join(commit_path, str(commit_index))):
    commit_index += 1
new_commit_path = os.path.join(commit_path, str(commit_index))

# If we do implement -a in our command
if a_option:
    for file in os.listdir(index_path):
        if os.path.isfile(file):
            shutil.copy2(file, os.path.join(index_path, file))            

if same_as_last_commit(commit_index, commit_path, index_path):
    print("nothing to commit")
    sys.exit(0)

os.makedirs(new_commit_path)

for filename in os.listdir(index_path):
    src = os.path.join(index_path, filename)
    dst = os.path.join(new_commit_path, filename)
    shutil.copy2(src,dst)

# A commit message file into commit path and make it writable
with open(os.path.join(new_commit_path, "commit_message.txt"), "w") as f:
    # Write in the commit_message.txt file what message u wrote in command line
    f.write(commit_message + '\n')

print(f"Committed as commit {commit_index}")
