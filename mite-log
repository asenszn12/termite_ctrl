#!/usr/bin/env python3

# prints a line for every commit made to the repo 
# Each line contains the "number commit_message
import os 

commit_path = '.mite/commits'
filename = 'commit_message.txt'

# If no commit dir, exit silently
if not os.path.isdir(commit_path):
    exit(0)

# store information about commits (mainly the commit_dir AND commit_message.txt)
commits = []
for commit_dir in os.listdir(commit_path):
# check each dir for commits and check through the files in the numbered dir 
    full_dir_path = os.path.join(commit_path, commit_dir)
    if os.path.isdir(full_dir_path):
        commit_msg_path = os.path.join(full_dir_path, filename)
        if os.path.exists(commit_msg_path):
            mod_time = os.path.getmtime(commit_msg_path)
            with open(commit_msg_path, 'r') as commit_msg_file:
                message = commit_msg_file.read().strip()
            commits.append([commit_dir, mod_time, message])   

# sorts by modification time by descending order
commits.sort(key=lambda x: x[1], reverse=True)  

for commit_dir, mod_time, message in commits:
    print(f"{commit_dir} {message}")