#!/usr/bin/env python3

# Removes file from index OR from curr directory AND index 

import sys
import os 
import filecmp

args = sys.argv[1:]
index_path = '.mygit/index'
commits_dir = '.mygit/commits'
options = set()
filenames = []

# If cached and force remove options exist in argument
for arg in args:
    if arg == '--cached' or arg == '--force':
        options.add(arg)
    # Else if no options, only attach filenames for our arguments
    else:
        filenames.append(arg)


if not os.path.isdir(index_path):
    sys.exit(1)

def get_latest_commit_file(filename):
    try:
        if not os.path.exists(commits_dir):
            return None
        
        # Get all numbered commit directories and find the highest
        commit_nums = [int(d) for d in os.listdir(commits_dir) if d.isdigit()]
        if not commit_nums:
            return None
            
        latest_commit = max(commit_nums)
        commit_file_path = f'{commits_dir}/{latest_commit}/{filename}'
        return commit_file_path if os.path.exists(commit_file_path) else None
    except:
        return None

def files_are_same(file1, file2):
    if not os.path.exists(file1) or not os.path.exists(file2):
        return False
    return filecmp.cmp(file1, file2, shallow=False)


if '--cached' in options:
    for filename in filenames:
        index_file_path = os.path.join(index_path, filename)
        latest_commit_path = get_latest_commit_file(filename)
        
        # Check if file exists in git at all (index OR commits)
        if not os.path.exists(index_file_path) and latest_commit_path is None:
            print(f"mygit-rm: error: '{filename}' is not in the mygit repository")
            continue
        
        # Only perform safety checks if --force is NOT present
        if '--force' not in options:
            if (os.path.exists(index_file_path) and os.path.exists(filename) and latest_commit_path):
                # Check if index differs from both working and repo
                index_vs_working = not files_are_same(index_file_path, filename)
                index_vs_commit = not files_are_same(index_file_path, latest_commit_path)
                
                if index_vs_working and index_vs_commit:
                    print(f"mygit-rm: error: '{filename}' in index is different to both the working file and the repository")
                    continue
        
        # If we get here, we safely remove from the index
        if os.path.exists(index_file_path):
            os.remove(index_file_path)